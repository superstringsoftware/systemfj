{
  "version": 3,
  "file": "systemfj.js",
  "sourceRoot": "",
  "sources": [
    "systemfj.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# base class shouldnt be used directly\nclass Variable\n  constructor: (@name, boundTo) ->\n    @boundTo = boundTo # boundTo is used in lambda and type functions to index to which variable current one is bound\n  bind: (val)-> throw \"Variable::bind() shouldn't be called directly!\"\n  show: -> console.dir this\n\n# used for type variables\nclass TypeVar extends Variable\n  constructor: (name, boundTo)-> super name, boundTo\n  kind: -> # should return Kind of a type variable's current value\n  bind: (val) -> throw \"TypeVar::bind() not implemented yet\"\n  show: => @name + \" :: \" + \"Type\"\n  shortShow: => @name\n\n# used for regular variables\nclass Var extends Variable\n  constructor: (name, boundTo, type)->\n    super name, boundTo\n    @type = type\n  type: -> @type # should return Type that our variable indexes - can be either TypeVar OR specific type\n  bind: (val) -> throw \"Var::bind() not implemented yet\"\n  show: => @name + \" :: \" + @type.name\n\n# class for holding values - basically, a record. Do we even need a class here?\nclass Value\n  # pass in constructorTag and reference to type, add value fields as needed\n  # for now passing reference to Type, ideally need to do all type checking via\n  # constructorTags only for efficiency\n  constructor: (@_constructorTag_, @_type_) ->\n  # pretty printing values\n  show: (top_level = true)=>\n    keys = (v for v in Object.keys(@) when v not in [\"show\", \"_constructorTag_\", \"_type_\"])\n    ret = if (keys.length > 0) and (not top_level) then \"(\" + @_constructorTag_ else @_constructorTag_  #+ \" :: \" + @_type_.name\n    #console.log \"Properties: --------------------------\"\n    #console.dir keys\n    for v in keys\n      if (@[v] instanceof Value)\n        ret = ret + \" \" + (@[v].show false)\n      else\n        ret += if (typeof @[v] is \"string\") then \" '\" + @[v] + \"'\" else \" \" + @[v].toString()\n    ret = if (keys.length > 0) and (not top_level) then ret + \")\" else ret\n    ret = ret + \" :: \" + @_type_.name if top_level\n    ret\n\n# class generating Product Type values (records)\n# Should NOT be available to constuct publicly, only from inside of Type\n# now can only generate Tuples (unnamed records)\nclass Constructor\n  constructor: (@name, @type, vars) ->\n    @vars = []\n    @vars = vars if vars?\n\n  # internal method assigning a value to n-th variable, doing typechecking etc along the way\n  _instantiate: (n, val) ->\n  # same as above but instantiates type for n-th variable, needed to e.g. create Just Int from Just a\n  _instantiateType: (n, type) ->\n\n  # creates new value of the current type, typechecks etc\n  # this is the main function to construct values\n  # now very inefficient\n  # bound since we are doing some fancy assignments for better syntax\n  new: (vals...) =>\n    #console.log \"Calling new!\"\n    #console.dir vals\n    if @vars.length is 0\n      new Value @name, @type # empty constructor is easy\n    else\n      #console.log \"Compound constructor\"\n      val = new Value @name, @type\n      for i in [0...@vars.length]\n        #console.log \"Processing \" + @vars[i].show()\n        #console.dir vals[i]\n        v = vals[i] # is there a value number i?\n        if v?\n          if @vars[i].type.equals Type.checkType v # are the types ok? doesnt work for polymorphic yet!!!\n            val[@vars[i].name] = v\n          else throw \"Type mismatch in assignment!\"\n      val\n\n  show: =>\n    ret = @name\n    for v in @vars\n      ret = ret + \" \" + v.type.shortShow true\n    ret\n\n# Class that contains all types in the system and at the same time serves as a SumType\n# of Constructors (which are Product types)\nclass Type\n  # create a new type with name and type variables (no regular vars as no dependent types yet)\n  # e.g. Maybe = new Type \"Maybe a\"\n  constructor: (type, constructors...)->\n    @constructors = {}\n    xs = type.split(' ');\n    @name = xs[0]\n    # creating TypeVars for each var name in the constructor\n    @vars = (new TypeVar xs[i], -1 for i in [1...xs.length])\n    @add cons for cons in constructors # adding constructors\n    Type[@name] = this # adding this type to the list of all types\n\n  # comparing 2 types, for now very basic (simply name)\n  equals: (type)=> @name is type.name\n\n  # adding a new constructor to this type in the same format as Type constructor,\n  # e.g. \"Just a\" or \"MyPair Int Float\"\n  add: (cons) =>\n    xs = cons.split(' ');\n    name = xs[0];\n    # for the remainder of the cons string things are a bit tricky:\n    # if there's a type var name (\"Just a\") - we need to create a Var, type of which is bound to the TypeVar with the same name on the type level\n    # if there's a specific type name (\"Just Int\") - we need to create a Var with type Int - *if* it exists in our system!\n    vars = []\n    for i in [1...xs.length]\n      # finding an index of the variable with the name given\n      v = @vars.findIndex (el)=> el.name is xs[i]\n      if v isnt -1 # found a variable, need to bind\n        # tricky: creating a Var of type TypeVar that is bound to an index found\n        vars.push new Var (i-1).toString(), -1, new TypeVar xs[i], v\n      else\n        if xs[i] is @name # recursive type\n          vars.push new Var (i-1).toString(), -1, this # since this is recursive type, just giving our var a reference to this\n        else # final option: need to look in existing types\n          t = Type[xs[i]]\n          # adding concrete type instead of a variable. No checking for it being a concrete type etc, very rudimentary\n          if t?\n            vars.push new Var (i-1).toString(), -1, t\n          else # error, nothing is found. TODO: handle error more gracefully\n            throw (\"Type \" + xs[i] + \" not found!\")\n\n    cons = new Constructor name, this, vars\n    @constructors[cons.name] = cons # adding constructor to the list of constructors\n    @[cons.name] = cons.new # adding \"new\" generating function as a constructor name - for cleaner syntax! (Nat.Z is a function call instead of Nat.Z.new)\n    #@[cons.name].bind cons # binding this to newly created constructor\n\n  # helper function that returns name of the type *even if v is not Value* but a primitive type\n  @checkType: (v) ->\n    if (v instanceof Value)\n      v._type_\n    else\n      switch (typeof v)\n        when \"string\" then Type.String\n        when \"number\" then Type.Float\n        else throw \"We got an unboxed value of type \" + (typeof v) + \" -- shouldn't happen!\"\n\n  shortShow: (inside = false)=>\n    ret = if (@vars.length > 0) and inside then \"(\" + @name else @name\n    for v in @vars\n      ret = ret + \" \" + v.name\n    ret = if (@vars.length > 0) and inside then ret + \")\" else ret\n    ret\n\n  show: =>\n    ret = \"type \" + @shortShow()\n    cs = Object.keys @constructors\n    if cs.length > 0\n      ret += \" = \" + @constructors[cs[0]].show()\n      ret += \" | \" + @constructors[cs[i]].show() for i in [1...cs.length]\n    ret\n\n  # returns array of all types pretty printed as Strings\n  @showAllTypes: =>\n    ret = []\n    for t of Type\n      ret.push Type[t].show() if Type[t] instanceof Type\n    ret\n\n# some built in types\nTOP = new Type \"_TOP_\" # top type of all types - for the future subtyping?\nBOTTOM = new Type \"_BOTTOM_\" # _|_ in Haskell\nEMPTY = new Type \"_EMPTY_\" # () in Haskell\nUNIT = new Type \"_UNIT_\", \"Unit\" # type with a single element\n# exposing constructors for cleaner syntax\nUnit = UNIT.Unit\n\n#console.log Unit().show()\n\n# primitive types (substituted into js types directly)\nJInt = new Type \"Int\", \"I#\"\nJFloat = new Type \"Float\", \"F#\"\nJString = new Type \"String\", \"S#\"\n\n# some standard types - exposing constructors right away\n# THIS SHOULD GO TO Type creation function - just add the names to Exports!!!\nPair = (new Type \"Pair a b\", \"Pair a b\").Pair\n#p = Pair 1, 2\nLeft = (new Type \"Either a b\", \"Left a\", \"Right b\").Left\nRight = Type.Either.Right\nJust = (new Type \"Maybe a\", \"Just a\", \"Nothing\").Just\nNothing = Type.Maybe.Nothing\nCell = (new Type \"List a\", \"Cell a List\", \"Nil\").Cell\nNil = Type.List.Nil\n\nZ = (new Type \"Nat\", \"Z\", \"S Nat\").Z\nS = Type.Nat.S\n\nT = Type # alias for global types, so that we can write things like T.Int\n\n# our functional function with pattern matching and type checking and polymorphism\nclass Func\n  constructor: (@name, @arity) ->\n    @functions = {}\n\n  match: (consTag, func) =>\n    @functions[consTag] = func\n\n  # function application - think through\n  # now only works with 1 argument - think about lambda for many argument functions???\n  ap: (vals...) =>\n    v = vals[0]\n    if not (v instanceof Value)\n      throw (\"Type error while calling \" + @name)\n    # pattern matching first\n    fn = x for x of @functions when x is v._constructorTag_\n    @functions[fn] v # calling matched function with the argument\n\n\n# Some tests #################################################\n\n#Maybe.add \"Nothing\"\n#Maybe.add \"Just a\"\n#tMaybe.add \"Crazy Int\"\n#tMaybe.add \"MoreCrazy Afasf\"\ntCustom = new Type \"Custom\", \"Cons Float String\"\n\nconsole.log t for t in Type.showAllTypes()\n\nlength = new Func \"length\"\nlength.match \"Nil\", -> 0\nlength.match \"Cell\", (x) -> 1 + length.ap (tail x)\n\nf1 = new Func \"toInt\", 1\nf1.match \"Z\", -> 0\nf1.match \"S\", (x) -> 1 + f1.ap x['0'] # this pattern matching works for 0th element of S constructor - how do we make it a better syntax???\ntoInt = f1.ap\n\n#console.dir toInt\n#console.dir Maybe, {depth: 4, colors: true}\n#console.dir List, {depth: 4, colors: true}\n#console.dir Type, {depth: 6, colors: true}\n\ntwo = S S S S Z()\nconsole.log Z().show()\nconsole.log two.show()\ny0 = toInt Z()\ny1 = toInt two\nconsole.log y0, y1\n\nt1 = T.Custom.Cons 2, \"Hello\"\nconsole.log t1.show()\n\n#console.log T.List.constructors.Cell.show()\n#console.log T.List.show()\n"
  ]
}